name: Build Red Dead Redemption APK

on:
  push:
    branches:
      - main
      - master
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      
      - name: Install Android NDK
        run: |
          echo "y" | sdkmanager --install "ndk;27.0.12077973"
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/27.0.12077973" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/27.0.12077973" >> $GITHUB_ENV
      
      - name: Grant execute permission for gradlew
        run: |
          chmod +x gradlew
          chmod +x app/gradlew
        working-directory: .
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Build Debug APK
        run: |
          cd app
          ./gradlew assembleDebug --stacktrace --no-daemon
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
      
      - name: Build Release APK (unsigned)
        run: |
          cd app
          ./gradlew assembleRelease --stacktrace --no-daemon
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        continue-on-error: true
      
      - name: Get version info
        id: version
        run: |
          VERSION_NAME=$(grep "versionName" app/build.gradle | awk -F'"' '{print $2}')
          VERSION_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
      
      - name: Rename APK files
        run: |
          mkdir -p output
          if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
            cp app/build/outputs/apk/debug/app-debug.apk output/RDR-Winlator-${{ steps.version.outputs.version_name }}-debug.apk
          fi
          if [ -f app/build/outputs/apk/release/app-release-unsigned.apk ]; then
            cp app/build/outputs/apk/release/app-release-unsigned.apk output/RDR-Winlator-${{ steps.version.outputs.version_name }}-release-unsigned.apk
          fi
      
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: RDR-Winlator-debug-${{ steps.version.outputs.date }}
          path: output/*-debug.apk
          if-no-files-found: error
      
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: RDR-Winlator-release-${{ steps.version.outputs.date }}
          path: output/*-release-unsigned.apk
          if-no-files-found: ignore
      
      - name: Generate build summary
        run: |
          echo "## üéÆ Build Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Name:** ${{ steps.version.outputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ steps.version.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date:** $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì± APK Files" >> $GITHUB_STEP_SUMMARY
          echo "Check the artifacts section above to download the APK files." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚öôÔ∏è Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Graphics Driver: Turnip 25.1.0" >> $GITHUB_STEP_SUMMARY
          echo "- DXVK: 2.3.1-arm64ec-gplasync (Async enabled)" >> $GITHUB_STEP_SUMMARY
          echo "- FEXCore: 2508 (Fastest mode)" >> $GITHUB_STEP_SUMMARY
          echo "- Audio: ALSA Reflector" >> $GITHUB_STEP_SUMMARY

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          pattern: RDR-Winlator-debug-*
          path: artifacts/
          merge-multiple: true
      
      - name: Download Release APK
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: RDR-Winlator-release-*
          path: artifacts/
          merge-multiple: true
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.apk
          body: |
            ## üéÆ Red Dead Redemption - Winlator Custom Build
            
            ### ‚ú® Features
            - Auto-start Red Dead Redemption 1 on app launch
            - Pre-optimized settings for best performance
            - OBB-based game loading
            - Custom touch controls
            
            ### ‚öôÔ∏è Optimized Configuration
            - **Graphics Driver:** Turnip 25.1.0
            - **DXVK:** 2.3.1-arm64ec-gplasync with Async enabled
            - **FEXCore:** 2508 (Fastest, X87 Fast, MultiBlock Enabled)
            - **Audio:** ALSA Reflector
            - **Startup Selection:** Aggressive
            
            ### üì¶ Installation
            1. Download the APK file
            2. Install on your Android device
            3. Create OBB file with your game files:
               ```
               zip -r main.1.com.rdr.winlator.obb "Red Dead Redemption"
               ```
            4. Copy OBB to: `/storage/emulated/0/Android/obb/com.rdr.winlator/`
            5. Open the app - game starts automatically!
            
            ### üìã Requirements
            - Android 8.0+ (API 26)
            - Adreno GPU (recommended)
            - 4GB+ RAM
            - Sufficient storage for game files
            
            ### üéÆ Game Structure
            Your OBB must contain:
            ```
            Red Dead Redemption/
            ‚îú‚îÄ‚îÄ RDR.exe
            ‚îî‚îÄ‚îÄ [other game files]
            ```
            
            See README_RDR.md for detailed instructions.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
